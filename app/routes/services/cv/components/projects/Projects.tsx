import { SectionHeader } from '../util/SectionHeader'
import { Project, type ProjectProps } from './Project'

export const Projects = () => {
	return (
		<section className="section-wrapper" id="projects">
			<SectionHeader title="Projects" dir="r" />

			<div className="grid gap-12 grid-cols-1 md:grid-cols-2">
				{projects.map(project => {
					return <Project key={project.title} {...project} />
				})}
			</div>
		</section>
	)
}

const projects: ProjectProps[] = [
	{
		title: 'PapaDB (My current side project)',
		imgSrc: 'cv/project-imgs/papadb.jpg',
		tech: [
			'PapaCMS',
			'AG-Grid',
			'Zod',
			'Math.js',
			'SQL (planned)',
			'Drizzle (planned)',
			'Supabase (planned)',
			'React Flow (planned)',
		],
		description: (
			<p>
				I'm learning to train AI models to build a AI based Accounting
				Information System.Based on fully customizable database columns,
				providing different views to cater to every kind of production needs.
			</p>
		),
		modalContent: (
			<>
				<p className="font-bold">
					I'm currently learning to train AI models to build an AI based
					Accounting Information System (AIS), which could create entries with
					prompt, and automatically generate financial statements with just one
					click.
				</p>
				<p>
					Despite AIS, by providing 20+ column types, PapaDB is a fully
					customizable online/self-managed relational database. It's built with
					AG Grid and AG Charts, providing a modern way to store and analyse
					your data. Not only could you view data on our platform, but also
					query data with SQL, or connect your data directly from our PostgreSQL
					to your own application.
				</p>
				<p>
					By providing different views, such as Grid (Table), Kanban, Gantt,
					Timeline, Calendar, and Form, PapaDB can cater to every kind of
					production needs, such as CRM, HRM, Project Management, or even an
					ERP.
				</p>
				<p>
					As for designing the database, user could enter their DBML and view it
					directly on the canva that built with React Flow.
				</p>
			</>
		),
	},
	{
		title: 'PapaCMS',
		imgSrc: 'cv/project-imgs/papacms.jpg',
		projectLinks: [
			'https://papacms.vercel.app',
			'https://papacms.vercel.app/blog/what-is-papa',
		],
		codeBases: ['https://github.com/gjc14/papa'],
		tech: [
			'TypeScript',
			'React Router v7',
			'Dark Mode',
			'SSR',
			'MongoDB',
			'Prisma',
			'AWS S3',
			'Cloudflare R2',
			'AI SDK',
			'SEO',
			'Resend API',
			'Cloud Run',
			'Docker',
			'Prettier',
		],
		description: (
			<p>
				PapaCMS integrates all the best modern website kits for you! Providing
				all the best and economic tools, you never need to investigate yourself.
			</p>
		),
		modalContent: (
			<>
				<p>
					PapaCMS is an open-source, basic CMS built with React Router v7
					(Remix) and TypeScript. It's designed to be a simple,&nbsp;
					<a
						className="underline text-primary"
						href="https://pagespeed.web.dev/analysis/https-papacms-vercel-app/qq2bz1wh21?form_factor=desktop"
						target="_blank"
						rel="noreferrer"
					>
						high-performance
					</a>
					, and user-friendly content management system for small businesses,
					startups, and personal websites.
				</p>
				<p>
					For object storage, such as documents, images, and videos, I use S3
					APIs to integrate with AWS S3 and providers that provide S3-compatible
					storage like Cloudflare R2.
				</p>
				<p>
					The post editor is built with TipTap, integrated generative AI,
					allowing users to choose between Gemini, ChatGPT, and Claude for
					paragraph generation.
				</p>
				<p>
					For SEO, users can easily assign SEO tags to specific routes in the
					SEO page. Post SEO is automatically generated by the system, but
					authors can directly edit the SEO title and description on the post
					edit page.
				</p>
				<p>
					Deployment is straightforward. I built with RRv7 framework, which
					under the hood uses Express.js as backend. Users can easily deploy to
					any operating system that supports Node.js, or deploy with a
					container.
				</p>
				<p>This website itself is built with PapaCMS.</p>
			</>
		),
	},
	{
		title: 'BUBU E-Scooter Website',
		imgSrc: 'cv/project-imgs/bubu-web-100.jpg',
		projectLinks: ['https://ridebubu.com'],
		tech: [
			'TypeScript',
			'Tailwind CSS',
			'React Router v7',
			'Cloud Run',
			'Cloudflare DNS',
			'Cloudflare Email',
			'Cloudflare R2',
		],
		description: (
			<p>
				The official BUBU E-Scooter website, built with TypeScript and Tailwind
				CSS. It's a simple and user-friendly website with all benchmark 100 on{' '}
				<a
					className="font-bold underline underline-offset-2"
					href="https://pagespeed.web.dev/analysis/https-ridebubu-com/llbg65h1w1?form_factor=desktop"
					target="_blank"
					rel="noreferrer"
				>
					PageSpeed
				</a>{' '}
				. Provides information about the rental service.
			</p>
		),
		modalContent: (
			<>
				<p>
					BUBU E-Scooter designed with Taiwind CSS, shadcn UI, and Magic UI.
					With help of Vercel V0 AI, I built the website within 3 days.
				</p>
				<p>
					The website is now delivered with Google Cloud Run, managed by
					Cloudflare DNS and its R2 Storage. The TLS/SSL is provided by Google
					Cloud Run.
				</p>
			</>
		),
	},
	{
		title: 'BUBU E-Scooter App',
		imgSrc: 'cv/project-imgs/bubu-app.jpg',
		projectLinks: ['https://ridebubu.com'],
		tech: [
			'Python',
			'Flask',
			'TypeScript',
			'React Router v7',
			'Tailwind CSS',
			'Compute Engine',
			'Cloudflare Tunnel',
			'MQTT',
			'Mosquitto',
			'SYSTEMD',
			'Github Actions',
			'VIM',
			'SSH',
			'Google Maps API',
			'LINE APIs',
			'Ragic',
			'TapPay APIs',
			'Resend APIs',
			'AWS',
		],
		description: (
			<p>
				<a
					className="font-bold underline underline-offset-2"
					href="https://ridebubu.com/blog/1m-taipei-government-siti-subsidy-receiver"
					target="_blank"
					rel="noreferrer"
				>
					1M Taipei Government SiTi Subsidy Receiver.
				</a>{' '}
				An e-scooter rental app based on the LINE Official Account, Messaging
				API, and LIFF. This is my first real-world large project, designed and
				built with two of my collegue, but I built the whole system on my own.
			</p>
		),
		modalContent: (
			<>
				<p>
					BUBU E-Scooter is a rental service based on the LINE Messaging API.
					The application is built with TypeScript React Router v7 (Remix v3),
					Python Flask, and Mosquitto MQTT Broker.
				</p>
				<p>
					The IoT part is built with Python and Flask, with a Mosquitto MQTT
					broker running on Linux DebianOS on Google Cloud Compute Engine to
					handle IoT communication.
				</p>
				<p>
					The client application is built with React and Tailwind, using LINE
					API to handle user authentication and the business process.
				</p>
				<p>
					In consideration of security, BUBU E-Scooter not only chose a larger
					and safer e-scooter with rear electric brake, but also implemented an
					exam to make sure users know their rights and obligations regarding
					riding an e-scooter. To achieve this, I built an interactive
					multiple-choice web app with React and integrated it into LINE LIFF.
				</p>
				<p>
					This project is currently being held in NCCU with help of NCCU
					incubator center. If you're interested in vehicle IoT or rental
					services, let's have a chat!
				</p>
			</>
		),
	},
	{
		title: 'TWNCHA (ceased)',
		imgSrc: 'cv/project-imgs/twncha.jpg',
		projectLinks: [
			'https://twncha.vercel.app',
			'https://about.twncha.com',
			'https://twncha.com',
		],
		tech: [
			'TypeScript',
			'Remix v2',
			'Tailwind CSS',
			'MongoDB Atlas',
			'Firebase',
			'Prisma',
			'Zustand',
			'Framer Motion',
			'Tiptap',
			'TapPay API',
			'Vercel',
			'Google Cloud Run',
			'Cloudflare',
			'Resend',
		],
		description:
			'E-commerce website for a Taiwanese tea brand, built with Remix v2 and Tailwind. It includes a shop, blog, and a admin panel.',
		modalContent: (
			<>
				<p>
					TWNCHA is a Taiwan tea brand with over 20 years in tea industry,
					provide the best flavour and quality of Taiwan.
				</p>
				<p>
					The tech stack includes full-stack Remix v2, MongoDB Atlas database,
					and Firebase for authentication and object storage. Deployed and CI/CD
					on Vercel, where as about page is deliverd by Google Cloud Run.
				</p>
				<p>
					Utilizing Prisma for ORM, TapPay API for in-site payment flow, and
					connected Resend for email sending. The shopping box state is built
					and managed with Zustand.
				</p>
				<p>
					I developed admin panel with Tailwind and Tiptap. It manages products,
					client data, and logistic, as well as store settings and sending
					customized HTML emails.
				</p>
				<p>
					This project is currently ceased due to the lack of concentration of
					founders.
				</p>
			</>
		),
	},
	{
		title: 'BUBU E-Scooter Flask Website (abandoned)',
		imgSrc: 'cv/project-imgs/bubu-flask-web.jpg',
		tech: [
			'Flask',
			'Bootstrap 5',
			'SSH',
			'Compute Engine',
			'Bitnami',
			'NGINX',
			"Let's Encrypt",
			'SYSTEMD',
			'VIM',
		],
		description:
			'It is abandoned. Brutally built with Flask, pure HTML, and Bootstrap 5. This is where I learnt fundamental web functionalities.',
		modalContent: (
			<>
				<p>
					This is my only project that built with Bootstrap 5. It was meant to
					be a substitute for the current WordPress website. But due to the lack
					of functionality and the difficulty of maintaining, it was abandoned.
					I later moved to React.
				</p>
				<p>
					It was built with Flask. The server ran on Compute Engine with
					Bitnami. I had to set up NGINX as the web server and Let's Encrypt for
					TLS/SSL myself. The server is managed by SYSTEMD and Gunicorn. As for
					code editing, I used VIM, and SSH via raw terminal or VSCode to the
					server.
				</p>
				<p>
					This is where I leant fundamental web functionalities. I learnt how to
					set up, manage a Linux Debian server and NGINX/Apache web server, as
					well as setting up a free Let's Encrypt TLS/SSL. Moreover, I learnt a
					lot SSH, VIM and other terminal commands.
				</p>
			</>
		),
	},
	{
		title: 'BUBU E-Scooter Website (retired)',
		imgSrc: 'cv/project-imgs/bubu-web-retired.jpg',
		tech: [
			'WordPress',
			'Elementor',
			'Compute Engine',
			'Bitnami',
			'Apache',
			'Let’s Encrypt',
			'CSS',
		],
		description:
			'An e-scooter rental app website, built on my own with WordPress and Elementor, deployed without any expense using Google Cloud Compute Engine free tier. This is the first programming project in my life.',
		modalContent: (
			<>
				<p>
					This is the first project I built for BUBU E-Scooter, as well as the
					start of my programming journey. It is a website created with
					WordPress and Elementor to showcase the rental service.
				</p>
				<p>
					I learnt WordPress and CSS here, which gave insight into how CMS,
					email, forms, and cybersecurity work, as well as the functionality of
					a basic website.
				</p>
				<p>
					However, I later decided to pursue a fully customizable approach to
					website development due to the limitations and cost of this ecosystem.
				</p>
				<p>
					It was hosted on Compute Engine with Bitnami, and now replaced by
					authentic React website.
				</p>
			</>
		),
	},
]
